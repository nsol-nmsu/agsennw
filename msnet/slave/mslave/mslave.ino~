#include <SoftwareSerial.h>
#include <XBee.h>
#include "rtrans.h"
#include "ringbuffer.h"
#include "xbee_init.h"
#include "spi_messaging.h"


void callback(rt_in_header *header, uint8_t payload[]);
void update_slaves();
void send_poll_response();
SoftwareSerial xs(6,7);
rt_state rtrans_state(xs, callback);

const char sslave_pin_count = 10;
char sslave_pins[] = { 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 13 };
char sslave_count = 0;
char sslaves[sslave_pin_count] = {0};

void setup(){

  Serial.begin(9600);
  
  Serial.print("Initializing serial... ");
  xs.begin(9600);
  
  delay(100);
  Serial.println("ok");
  
  Serial.print("Initializing xbee... ");
  if(xbee_init(xs)){
    Serial.println("ok.");
  }
  else{
    Serial.println("fail."); 
  }
    
  Serial.print("Initializing rt... ");
  rtrans_state.rt_init();
  Serial.println("ok");
  
  Serial.print("Initializing SPI...");
  SPI_setup();
  Serial.println("ok");
}

void loop(){
  rtrans_state.rt_loop();
}

void update_slaves()
{
  for(int i = 0 ; i < sslave_pin_count ; i++)
  {
    if(is_slave(sslave_pins[i]))
    {
      sslaves[sslave_count] = sslave_pins[i];
      sslave_count++;
      Serial.print("Found slave on pin "); Serial.println(sslave_pins[i]);
    }
  }
}

void send_poll_response()
{
}
